@model AccountingApp.Models.ChartOfAcc

@{
    ViewBag.Title = "New Account";
    Layout = "~/Views/Shared/_Layout_Admin.cshtml";
    //Layout = null;
}
<html>
<head>
    @*<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.0/css/bootstrap.min.css" integrity="sha384-PDle/QlgIONtM1aqA2Qemk5gPOE7wFq8+Em+G/hmo5Iq0CCmYZLv3fVRDJ4MMwEA" crossorigin="anonymous">*@

</head>
<body>
    <br />

    @*@using (Html.BeginForm())
    {*@

        <form method="post" id="accountform" class="needs-validation" novalidate>
            <div class="container" style="width: 43%">
                @Html.ValidationSummary(true, "The following errors were found:", new { @class = "alert alert-danger" })
            </div>

            <div class="container shadow" style="width:70%; background-color:white">
                <br />
                <h3> Create New Account</h3>
                <hr />
                <br />
                @*<hr />*@

                <div class="form-row">
                    <div class="form-group col-md-6">

                        <label for="AccountNumber validationTooltip01" class="control-label">Account Number</label>
                        <input type="text" class="form-control" id="AccountNumber validationTooltip01" name="AccountNumber" required>
                        @*@Html.ValidationMessageFor(m => m.AccountNumber, "", new { @class = "text-danger" })*@
                        <div class="invalid-feedback">
                            Please enter account number.
                        </div>
                    </div>
                    <div class="form-group col-md-6">

                        <label for="AccountName" class="control-label">Account Name</label>
                        <input type="text" class="form-control" id="AccountName" name="AccountName" required pattern="[A-Za-z]{1,20}">
                        @*@Html.ValidationMessageFor(m => m.AccountName, "", new { @class = "text-danger" })*@
                        <div class="invalid-feedback">
                            Please enter account name.
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <div class="form-group">
                            <label for="AccountType" class="control-label">Account Type</label>
                            <select name="AccountType" class="form-control" id="AccountType" required>
                                <option value="">Select..</option>

                                <option value="Assets">Assets</option>
                                <option value="Liabilities">Liabilities</option>
                                <option value="Equity">Equity</option>
                                <option value="Revenue">Revenue</option>
                                <option value="Expense">Expense</option>

                            </select>
                            @*@Html.ValidationMessageFor(m => m.AccountType, "", new { @class = "text-danger" })*@
                            <div class="invalid-feedback">
                                Please select account type.
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-6">

                        <div class="form-group">
                            <label for="NormalSide">Normal Side</label>
                            <select class="cutom-select form-control" id="NormalSide" name="NormalSide" required>
                                <option value="">Select..</option>

                                <option value="Debit">Debit</option>
                                <option value="Credit">Credit</option>

                            </select>
                            <div class="invalid-feedback">
                                Please select normal side.
                            </div>
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <div class="form-group">
                            <label for="OriginalBalance">Original Balance</label>
                            <input type="text" class="form-control text-right right-justified" id="OriginalBalance" placeholder="0.00" name="OriginalBalance" required>
                            @*@Html.ValidationMessageFor(m => m.OriginalBalance, "", new { @class = "text-danger" })*@
                            <div class="invalid-feedback">
                                This field is required (No more than two decimal places)
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        <div class="form-group">
                            <label for="CurrentBalance">Current Balance</label>
                            <input type="text" class="form-control text-right" id="CurrentBalance" readonly="readonly" value="0.00" name="CurrentBalance" required>
                            @*@Html.ValidationMessageFor(m => m.CurrentBalance, "", new { @class = "text-danger" })*@
                            <div class="invalid-feedback">
                                This field is required (No more than two decimal places)
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="AccountDescription">Account Description</label>
                    <textarea class="form-control" id="AccountDescription" rows="5" name="AccountDescription" placeholder="(optional)"></textarea>
                </div>
                @*<div class="form-group">
                    <label for="CreatedBy">Created By</label>
                    <input type="text" class="form-control" id="CreatedBy" placeholder="Admin" name="CreatedBy" required>*@
                    @*@Html.ValidationMessageFor(m => m.CreatedBy, "", new { @class = "text-danger" })*@
                    @*<div class="invalid-feedback">
                        This field is required
                    </div>
                </div>*@

                @*<div class="form-group">
                    <label for="Active" class="control-label">Active</label>
                    <input data-val="true" id="Active" name="Active" type="checkbox" value="true" required />
                    <input name="Active" type="hidden" value="false" />

                    @Html.ValidationMessageFor(m => m.Active, "", new { @class = "text-danger" })*@
                            @*</div>*@
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="Active" name="Active" required >
                        <label class="form-check-label" for="Active"style="font-size:large; padding-left:0">
                            Active
                        </label>
                        
                    </div>
                </div>
                <hr />

                <button type="submit" class="btn btn-success" href="@Url.Action("ChartOfAccounts")" id="btnsubmit">Save</button>
                <a href="@Url.Action("ChartOfAccounts")" class="btn btn-warning">
                    <span class="glyphicon glyphicon-remove"></span> Cancel
                </a>
                <hr />
            </div>
            <br />
            <br />
        </form>
    @*}*@

    <script>
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                var forms = document.getElementsByClassName('needs-validation');
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();

    </script>

    <script>

        // Restricts input for the given textbox to the given inputFilter.
        function setInputFilter(textbox, inputFilter) {
            ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function (event) {
                textbox.addEventListener(event, function () {
                    if (inputFilter(this.value)) {
                        this.oldValue = this.value;
                        this.oldSelectionStart = this.selectionStart;
                        this.oldSelectionEnd = this.selectionEnd;
                    } else if (this.hasOwnProperty("oldValue")) {
                        this.value = this.oldValue;
                        this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                    }
                });
            });
        }

        setInputFilter(document.getElementById("AccountNumber validationTooltip01"), function (value) {
            return /^\d*$/.test(value);
        });

        setInputFilter(document.getElementById("OriginalBalance"), function (value) {
            return /^-?\d*[.,]?\d{0,2}$/.test(value);
        });

    </script>

    <script>

        function validateFloatKeyPress(el, evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            var number = el.value.split('.');
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            }
            //just one dot
            if (number.length > 1 && charCode == 46) {
                return false;
            }
            //get the carat position
            var caratPos = getSelectionStart(el);
            var dotPos = el.value.indexOf(".");
            if (caratPos > dotPos && dotPos > -1 && (number[1].length > 1)) {
                return false;
            }
            return true;
        }

        function getSelectionStart(o) {
            if (o.createTextRange) {
                var r = document.selection.createRange().duplicate()
                r.moveEnd('character', o.value.length)
                if (r.text == '') return o.value.length
                return o.value.lastIndexOf(r.text)
            } else return o.selectionStart
        }

    </script>

</body>
</html>
